name: collectionCreationStateMachine-${self:service}-${opt:stage, self:provider.stage}
id: CollectionCreationStateMachine
definition:
  Comment: "Create a collection for a Brand or User"
  StartAt: Start
  States:
    Start:
      Type: Task
      Resource: 
        Fn::GetAtt: [collectionStart, Arn]
      Next: StartChoiceState
    StartChoiceState:
      Type: Choice
      Choices:
      - Variable: "$.hasWallet"
        StringEquals: "true"
        Next: EstimateFees
      - Variable: "$.hasWallet"
        StringEquals: "false"
        Next: Stop
    EstimateFees:
      Type: Task
      Resource: 
        Fn::GetAtt: [collectionEstimateFees, Arn]
      Next: Stop
    # UserBackpacCreate:
    #   Type: Task
    #   Resource: 
    #     Fn::GetAtt: [packCreate, Arn]
    #   #"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage, self:provider.stage}-languageStart"
    #   Next: Stop
    Stop:
      Type: Task
      Resource: 
        Fn::GetAtt:
          - packStop
          - Arn
      End: true       
# notifications:
#   ABORTED:
#     - lambda: 
#         Fn::GetAtt: [collectionNotification, Arn]
#   FAILED:
#     - lambda: 
#         Fn::GetAtt: [collectionNotification, Arn]
#   RUNNING:
#     - lambda: 
#         Fn::GetAtt: [collectionNotification, Arn]
#   SUCCEEDED:
#     - lambda: 
#         Fn::GetAtt: [collectionNotification, Arn]
#   TIMED_OUT:
#     - lambda: 
#         Fn::GetAtt: [collectionNotification, Arn] 